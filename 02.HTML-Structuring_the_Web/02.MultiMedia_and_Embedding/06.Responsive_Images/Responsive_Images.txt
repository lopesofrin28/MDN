*Why responsive images?
-Let's examine a typical scenario. A typical website may contain a header image and some content images below the header.
 The header image will likely span the whole of the width of the header, and the content image will fit somewhere
 inside the content column.

 *How do you create responsive images?
-In this section, we'll look at the two problems illustrated above and show how to solve them using HTML's responsive image features.
 You should note that we will be focusing on the HTML <img>s for this section

 [1]Resolution switching: Different sizes
- We want to display identical image content, just larger or smaller depending on the device
The standard <img> element traditionally only lets you point the browser to a single source file.
We can however use two new attributes — srcset and sizes — to provide several additional source images
along with hints to help the browser pick the right one. You can see an example of this in our responsive.html example on Github

-ex:     <img srcset="elva-fairy-480w.jpg 480w,
                 elva-fairy-800w.jpg 800w"
         sizes="(max-width: 600px) 480px,
                800px"
         src="elva-fairy-800w.jpg"
         alt="Elva dressed as a fairy">


The srcset and sizes attributes look complicated, but they're not too hard to understand if you format them as shown above,
with a different part of the attribute value on each line. Each value contains a comma-separated list, and each part of
those lists is made up of three sub-parts.

-srcset defines the set of images we will allow the browser to choose between, and what size each image is.
Each set of image information is separated from the previous one by a comma. For each one, we write:

1]An image filename (elva-fairy-480w.jpg)
2]A space
3]The image's intrinsic width in pixels (480w) — note that this uses the w unit, not px as you might expect.
This is the image's real size, which can be found by inspecting the image file on your computer


-SIZES defines a set of media conditions (e.g. screen widths) and indicates what image size would be best to choose, when certain media conditions are true — these are the hints we talked about earlier. In this case, before each comma we write:

1]A media condition ((max-width:600px)) — you'll learn more about these in the CSS topic, but for now let's just say
 that a media condition describes a possible state that the screen can be in. In this case, we are saying
  "when the viewport width is 600 pixels or less".
2]A space
3]The width of the slot the image will fill when the media condition is true (480px)


-So, with these attributes in place, the browser will:

Look at its device width.
Work out which media condition in the sizes list is the first one to be true.
Look at the slot size given to that media query.
Load the image referenced in the srcset list that has the same size as the slot or, if there isn't one,
the first image that is bigger than the chosen slot size.



[2]Resolution switching: Same size, different resolutions
-If you're supporting multiple display resolutions, but everyone sees your image at the same real-world size on the screen,
 you can allow the browser to choose an appropriate resolution image by using srcset with x-descriptors and without sizes —

*Art direction
-the art direction problem involves wanting to change the image displayed to suit different image display sizes.
For example, a web page includes a large landscape shot with a person in the middle when viewed on a desktop browser.
When viewed on a mobile browser, that same image is shrunk down, making the person in the image very small and hard to see.
It would probably be better to show a smaller, portrait image on mobile, which zooms in on the person.
The <picture> element allows us to implement just this kind of solution.


*Summary

-Art direction: The problem whereby you want to serve cropped images for different layouts —
for example a landscape image showing a full scene for a desktop layout, and a portrait image showing the main subject
zoomed in for a mobile layout. You can solve this problem using the <picture> element.

-Resolution switching: The problem whereby you want to serve smaller image files to narrow screen devices,
as they don't need huge images like desktop displays do — and also optionally that you want to serve different resolution images
to high density/low density screens. You can solve this problem by using vector graphics (SVG images) and the srcset
with sizes attributes.
