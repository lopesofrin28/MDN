This article gets you started with HTML tables, covering the very basics such as rows and cells, headings,
making cells span multiple columns and rows, and how to group together all the cells in a column for styling purposes.

*What is a table ?
-A table is a structured set of data made up of rows and columns (tabular data). A table allows you to quickly and
easily look up values that indicate some kind of connection between different types of data, for example a person and their age,
or a day of the week, or the timetable for a local swimming pool.

*How does a table work?
-The point of a table is that it is rigid. Information is easily interpreted by making visual associations
between row and column headers.
When done correctly, even blind people can interpret tabular data in an HTML table — a successful HTML table
should enhance the experience of sighted and visually impaired users alike.

*Table styling
- for tables to be effective on the web, you need to provide some styling information with CSS, as well as
good solid structure with HTML. In this module we are focusing on the HTML part; to find out about the CSS part
you should visit our Styling tables article after you've finished here.

*When should you NOT use HTML tables?
-HTML tables should be used for tabular data — this is what they are designed for. Unfortunately, a lot of people used
 to use HTML tables to lay out web pages, e.g. one row to contain the header, one row to contain the content columns,
 one row to contain the footer, etc.

In short, using tables for layout rather than CSS layout techniques is a bad idea. The main reasons are as follows:

[1]Layout tables reduce accessibility for visually impaired users:
Screenreaders, used by blind people, interpret the tags that exist in an HTML page and read out the contents to the user.
 Because tables are not the right tool for layout, and the markup is more complex than with CSS layout techniques,
 the screenreaders' output will be confusing to their users.

[2]Tables produce tag soup:
As mentioned above, table layouts generally involve more complex markup structures than proper layout techniques.
 This can result in the code being harder to write, maintain, and debug.

[3]Tables are not automatically responsive:
When you use proper layout containers (such as <header>, <section>, <article>, or <div>), their width defaults
 to 100% of their parent element. Tables on the other hand are sized according to their content by default,
 so extra measures are needed to get table layout styling to effectively work across a variety of devices.


*Adding headers with <th> elements
-Now let's turn our attention to table headers — special cells that go at the start of a row or column and define
the type of data that row or column contains (as an example, see the "Person" and "Age" cells in the first example
shown in this article).


*Why are headers useful?
-it is easier to find the data you are looking for when the headers clearly stand out, and the design just generally looks better.
Tables headers also have an added benefit — along with the scope attribute (which we'll learn about in the next article),
they allow you to make tables more accessible by associating each header with all the data in the same row or column.

*Allowing cells to span multiple rows and columns
-Sometimes we want cells to span multiple rows or columns. Take the following simple example, which shows the names
 of common animals. In some cases, we want to show the names of the males and females next to the animal name.
 Sometimes we don't, and in such cases we just want the animal name to span the whole table

*Providing common styling to columns
-There is one last feature we'll tell you about in this article before we move on. HTML has a method of defining
styling information for an entire column of data all in one place — the <col> and <colgroup> elements.
These exist because it can be a bit annoying and inefficient having to specify styling on columns —
you generally have to specify your styling information on every <td> or <th> in the column, or use a complex selector
such as :nth-child().
-Effectively we are defining two "style columns", one specifying styling information for each column. We are not styling
the first column, but we still have to include a blank <col> element — if we didn't, the styling would just be applied
to the first column.

-If we wanted to apply the styling information to both columns, we could just include one <col> element with a
span attribute on it
