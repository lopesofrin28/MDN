What is involved in styling text in CSS?
As you'll have already experienced in your work with HTML and CSS, text inside an element is laid out inside the element's content box. It starts at the top left of the content area (or the top right, in the case of RTL language content), and flows towards the end of the line. Once it reaches the end, it goes down to the next line and continues, then the next line, until all the content has been placed in the box. Text content effectively behaves like a series of inline elements, being laid out on lines adjacent to one another, and not creating line breaks until the end of the line is reached, or unless you force a line break manually using the <br> element.

The CSS properties used to style text generally fall into two categories, which we'll look at separately in this article:

-Font styles: Properties that affect the font that is applied to the text, affecting what font is applied, how big it is, whether it is bold, italic, etc.
-Text layout styles: Properties that affect the spacing and other layout features of the text, allowing manipulation of, for example, the space between lines and letters, and how the text is aligned within the content box.



*Fonts
Let's move straight on to look at properties for styling fonts

Color
The color property sets the color of the foreground content of the selected elements (which is usually the text, but can also include a couple of other things, such as an underline or overline placed on text using the text-decoration property).

Font families
To set a different font on your text, you use the font-family property — this allows you to specify a font (or list of fonts) for the browser to apply to the selected elements. The browser will only apply a font if it is available on the machine the website is being accessed on; if not, it will just use a browser default font.

Web safe fonts
Speaking of font availability, there are only a certain number of fonts that are generally available across all systems and can therefore be used without much worry. These are the so-called web safe fonts.
Most of the time, as web developers we want to have more specific control over the fonts used to display our text content. The problem is to find a way to know which font is available on the computer used to see our web pages. There is no way to know this in every case, but the web safe fonts are known to be available on nearly all instances of the most used operating systems (Windows, macOS, the most common Linux distributions, Android, and iOS).
The list of actual web safe fonts will change as operating systems evolve, but it's reasonable to consider the following fonts web safe, at least for now (many of them have been popularized thanks to the Microsoft Core fonts for the Web initiative in the late 90s and early 2000s):


Default fonts
CSS defines five generic names for fonts:  serif, sans-serif, monospace, cursive and fantasy. Those are very generic and the exact font face used when using those generic names is up to each browser and can vary for each operating system they are running on. It represents a worst case scenario where the browser will try to do its best to provide at least a font that looks appropriate. serif, sans-serif and monospace are quite predictable and should provide something reasonable. On the other hand, cursive and fantasy are less predictable and we recommend using them very carefully, testing as you go.


Font stacks
Since you can't guarantee the availability of the fonts you want to use on your webpages (even a web font could fail for some reason), you can supply a font stack so that the browser has multiple fonts it can choose from. This simply involves a font-family value consisting of multiple font names separated by commas
p {
  font-family: "Trebuchet MS", Verdana, sans-serif;
}
In such a case, the browser starts at the beginning of the list and looks to see if that font is available on the machine. If it is, it applies that font to the selected elements. If not, it moves on to the next font, and so on.

It is a good idea to provide a suitable generic font name at the end of the stack so that if none of the listed fonts are available, the browser can at least provide something approximately suitable. To emphasise this point, paragraphs are given the browser's default serif font if no other option is available — which is usually Times New Roman — this is no good for a sans-serif font!



*Font size
In our previous module's CSS values and units article, we reviewed length and size units. Font size (set with the font-size property) can take values measured in most of these units (and others, such as percentages), however the most common units you'll use to size text are:

-px (pixels): The number of pixels high you want the text to be. This is an absolute unit — it results in the same final computed value for the font on the page in pretty much any situation.
-ems: 1 em is equal to the font size set on the parent element of the current element we are styling (more specifically, the width of a capital letter M contained inside the parent element.) This can become tricky to work out if you have a lot of nested elements with different font sizes set, but it is doable, as you'll see below. Why bother? It is quite natural once you get used to it, and you can use em to size everything, not just text. You can have an entire website sized using em, which makes maintenance easy.
-rems: These work just like em, except that 1 rem is equal to the font size set on the root element of the document (i.e. <html>), not the parent element. This makes doing the maths to work out your font sizes much easier, although if you want to support really old browsers, you might struggle — rem is not supported in Internet Explorer 8 and below.

The font-size of an element is inherited from that element's parent element. This all starts with the root element of the entire document — <html> — the font-size of which is set to 16px as standard across browsers. Any paragraph (or another element that doesn't have a different size set by the browser) inside the root element will have a final size of 16 px. Other elements may have different default sizes, for example an <h1> element has a size of 2 em set by default, so it will have a final size of 32 px.


Font style, font weight, text transform, and text decoration
CSS provides four common properties to alter the visual weight/emphasis of text:

-font-style: Used to turn italic text on and off. Possible values are as follows (you'll rarely use this, unless you want to turn some italic styling off for some reason):
    normal: Sets the text to the normal font (turns existing italics off.)
    italic: Sets the text to use the italic version of the font if available; if not available, it will simulate italics with oblique instead.
    oblique: Sets the text to use a simulated version of an italic font, created by slanting the normal version.

-font-weight: Sets how bold the text is. This has many values available in case you have many font variants available (such as -light, -normal, -bold, -extrabold, -black, etc.), but realistically you'll rarely use any of them except for normal and bold:
    normal, bold: Normal and bold font weight
    lighter, bolder: Sets the current element's boldness to be one step lighter or heavier than its parent element's boldness.
    100–900: Numeric boldness values that provide finer grained control than the above keywords, if needed.

-text-transform: Allows you to set your font to be transformed. Values include:
    none: Prevents any transformation.
    uppercase: Transforms ALL TEXT TO CAPITALS.
    lowercase: Transforms all text to lower case.
    capitalize: Transforms all words to Have The First Letter Capitalized.
    full-width: Transforms all glyphs to be written inside a fixed-width square, similar to a monospace font, allowing aligning of e.g. Latin characters along with Asian language glyphs (like Chinese, Japanese, Korean).

-text-decoration: Sets/unsets text decorations on fonts (you'll mainly use this to unset the default underline on links when styling them.) Available values are:
    none: Unsets any text decorations already present.
    underline: Underlines the text.
    overline: Gives the text an overline.
    line-through: Puts a strikethrough over the text.

You should note that text-decoration can accept multiple values at once, if you want to add multiple decorations simultaneously, for example text-decoration: underline overline. Also note that text-decoration is a shorthand property for text-decoration-line, text-decoration-style, and text-decoration-color. You can use combinations of these property values to create interesting effects, for example text-decoration: line-through red wavy.




*Text drop shadows
You can apply drop shadows to your text using the text-shadow property. This takes up to four values, as shown in the example below:

text-shadow: 4px 4px 5px red;
The four properties are as follows:

1]The horizontal offset of the shadow from the original text — this can take most available CSS length and size units, but you'll most commonly use px; positive values move the shadow right, and negative values left. This value has to be included.
2]The vertical offset of the shadow from the original text; behaves basically just like the horizontal offset, except that it moves the shadow up/down, not left/right. This value has to be included.
3]The blur radius — a higher value means the shadow is dispersed more widely. If this value is not included, it defaults to 0, which means no blur. This can take most available CSS length and size units.
4]The base color of the shadow, which can take any CSS color unit. If not included, it defaults to black.

-Multiple shadows
You can apply multiple shadows to the same text by including multiple shadow values separated by commas, for example:

text-shadow: 1px 1px 1px red,
             2px 2px 1px red;






*Text layout
With basic font properties out the way, let's now have a look at properties we can use to affect text layout.

-Text alignment
The text-align property is used to control how text is aligned within its containing content box. The available values are as follows, and work in pretty much the same way as they do in a regular word processor application:

      left: Left-justifies the text.
      right: Right-justifies the text.
      center: Centers the text.
      justify: Makes the text spread out, varying the gaps in between the words so that all lines of text are the same width. You need to use this carefully — it can look terrible, especially when applied to a paragraph with lots of long words in it. If you are going to use this, you should also think about using something else along with it, such as hyphens, to break some of the longer words across lines.

-Line height
The line-height property sets the height of each line of text — this can take most length and size units, but can also take a unitless value, which acts as a multiplier and is generally considered the best option — the font-size is multiplied to get the line-height. Body text generally looks nicer and is easier to read when the lines are spaced apart; the recommended line height is around 1.5 – 2 (double spaced.) So to set our lines of text to 1.6 times the height of the font, you'd use this:

line-height: 1.6;

-Letter and word spacing
The letter-spacing and word-spacing properties allow you to set the spacing between letters and words in your text. You won't use these very often, but might find a use for them to get a certain look, or to improve the legibility of a particularly dense font. They can take most length and size units.
So as an example, we could apply some word- and letter-spacing to the first line of each  <p> element in our example:

p::first-line {
  letter-spacing: 4px;
  word-spacing: 4px;
}





*Other properties worth looking at:
The above properties give you an idea of how to start styling text on a webpage, but there are many more properties you could use. We just wanted to cover the most important ones here. Once you've become used to using the above, you should also explore the following:

-Font styles:

      font-variant: Switch between small caps and normal font alternatives.
      font-kerning: Switch font kerning options on and off.
      font-feature-settings: Switch various OpenType font features on and off.
      font-variant-alternates: Control the use of alternate glyphs for a given font-face.
      font-variant-caps: Control the use of alternate capital glyphs.
      font-variant-east-asian: Control the usage of alternate glyphs for East Asian scripts, like Japanese and Chinese.
      font-variant-ligatures: Control which ligatures and contextual forms are used in text.
      font-variant-numeric: Control the usage of alternate glyphs for numbers, fractions, and ordinal markers.
      font-variant-position: Control the usage of alternate glyphs of smaller sizes positioned as superscript or subscript.
      font-size-adjust: Adjust the visual size of the font independently of its actual font size.
      font-stretch: Switch between possible alternative stretched versions of a given font.
      text-underline-position: Specify the position of underlines set using the text-decoration-line property underline value.
      text-rendering: Try to perform some text rendering optimization.


-Text layout styles:

      text-indent: Specify how much horizontal space should be left before the beginning of the first line of the text content.
      text-overflow: Define how overflowed content that is not displayed is signaled to users.
      white-space: Define how whitespace and associated line breaks inside the element are handled.
      word-break: Specify whether to break lines within words.
      direction: Define the text direction (This depends on the language and usually it's better to let HTML handle that part as it is tied to the text content.)
      hyphens: Switch on and off hyphenation for supported languages.
      line-break: Relax or strengthen line breaking for Asian languages.
      text-align-last: Define how the last line of a block or a line, right before a forced line break, is aligned.
      text-orientation: Define the orientation of the text in a line.
      overflow-wrap: Specify whether or not the browser may break lines within words in order to prevent overflow.
      writing-mode: Define whether lines of text are laid out horizontally or vertically and the direction in which subsequent lines flow.



*Font shorthand
Many font properties can also be set through the shorthand property font. These are written in the following order:  font-style, font-variant, font-weight, font-stretch, font-size, line-height, and font-family.

Among all those properties, only font-size and font-family are required when using the font shorthand property.

A forward slash has to be put in between the font-size and line-height properties.

A full example would look like this:

      font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;
