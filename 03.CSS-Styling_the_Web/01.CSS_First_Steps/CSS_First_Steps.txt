Learn to style HTML using CSS
-Cascading Stylesheets — or CSS — is the first technology you should start learning after HTML. While HTML is
used to define the structure and semantics of your content, CSS is used to style it and lay it out. For example,
you can use CSS to alter the font, color, size, and spacing of your content, split it into multiple columns,
or add animations and other decorative features.

*Modules
-This topic contains the following modules, in a suggested order for working through them. You should definitely start with the first one.

[1]CSS first steps
-CSS (Cascading Style Sheets) is used to style and lay out web pages — for example, to alter the font, color, size,
and spacing of your content, split it into multiple columns, or add animations and other decorative features.
This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the
syntax looks like, and how you can start using it to add styling to HTML.

[2]CSS building blocks
-This module carries on where CSS first steps left off — now you've gained familiarity with the language and its syntax,
and got some basic experience with using it, its time to dive a bit deeper. This module looks at the cascade and inheritance,
all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more.

The aim here is to provide you with a toolkit for writing competent CSS and help you understand all the essential theory,
before moving on to more specific disciplines like text styling and CSS layout.

[3]Styling text
-With the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text —
one of the most common things you'll do with CSS. Here we look at text styling fundamentals, including setting font,
boldness, italics, line and letter spacing, drop shadows and other text features. We round off the module by looking
at applying custom fonts to your page, and styling lists and links.

[4]CSS layout
At this point we've already looked at CSS fundamentals, how to style text, and how to style and manipulate the boxes
that your content sits inside. Now it's time to look at how to place your boxes in the right place in relation to
the viewport, and one another. We have covered the necessary prerequisites so we can now dive deep into CSS layout,
looking at different display settings, modern layout tools like flexbox, CSS grid, and positioning, and some of the
legacy techniques you might still want to know about.
