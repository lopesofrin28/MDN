Applying CSS to HTML
First, let's examine three methods of applying CSS to a document: with an external stylesheet, with an internal stylesheet,
and with inline styles.

[1]External stylesheet
-An external stylesheet contains CSS in a separate file with a .css extension. This is the most common and useful method
of bringing CSS to a document. You can link a single CSS file to multiple web pages, styling all of them with the same
CSS stylesheet. In the Getting started with CSS, we linked an external stylesheet to our web page.
You reference an external CSS stylesheet from an HTML <link> element.
-The href attribute of the <link> element needs to reference a file on your file system. In the example above, the CSS file
is in the same folder as the HTML document, but you could place it somewhere else and adjust the path

[2]Internal stylesheet
-An internal stylesheet resides within an HTML document. To create an internal stylesheet, you place CSS inside a <style>
element contained inside the HTML <head>.
-In some circumstances, internal stylesheets can be useful. For example, perhaps you're working with a content management
system where you are blocked from modifying external CSS files.
-But for sites with more than one page, an internal stylesheet becomes a less efficient way of working. To apply
uniform CSS styling to multiple pages using internal stylesheets, you must have an internal stylesheet in every web page
that will use the styling. The efficiency penalty carries over to site maintenance too. With CSS in internal stylesheets,
there is the risk that even one simple styling change may require edits to multiple web pages.

[3]Inline styles
-Inline styles are CSS declarations that affect a single HTML element, contained within a style attribute.
Avoid using CSS in this way when possible. It is the opposite of a best practice. First, it is the least efficient
implementation of CSS for maintenance. One styling change might require multiple edits within in a single web page.
Second, inline CSS also mixes (CSS) presentational code with HTML and content, making everything more difficult to
read and understand. Separating code and content makes maintenance easier for all who work on the the website.


*Selectors
-A selector targets HTML to apply styles to content. We have already discovered a variety of selectors in the
Getting started with CSS tutorial. If CSS is not applying to content as-expected, your selector may not match
the way you think it should match.
-Each CSS rule starts with a selector—or a list of selectors—in order to tell the browser which element or elements
the rules should apply to.


*Specificity
-You may encounter scenarios where two selectors select the same HTML element. Consider the stylesheet below,
with a p selector that sets paragraph text to blue. However, there is also a class that sets the text of selected elements
to red.
-The CSS language has rules to control which selector is stronger in the event of a conflict. These rules are called
cascade and specificity.
- However, in the case of our earlier example with the conflict between the class selector and the element selector,
the class prevails, rendering red paragraph text. How can this happen even though a conflicting style appears later
in the stylesheet? A class is rated as being more specific, as in having more specificity than the element selector,
so it cancels the other conflicting style declaration


*Properties and values
-At its most basic level, CSS consists of two components:

1]Properties: These are human-readable identifiers that indicate which stylistic features you want to modify.
For example, font-size, width, background-color.
2]Values: Each property is assigned a value. This value indicates how to style the property.
The property name is color and the value is blue.

-When a property is paired with a value, this pairing is called a CSS declaration. CSS declarations are found
within CSS Declaration Blocks.

*Functions
-While most values are relatively simple keywords or numeric values, there are some values which take the form of a function.
An example would be the calc() function, which can do simple math within CSS:
--width: calc(90% - 30px);

*@rules
-CSS @rules (pronounced "at-rules") provide instruction for what CSS should perform or how it should behave.
Some @rules are simple with just a keyword and a value. For example,  @import imports a stylesheet into another
CSS stylesheet:
EX: @import 'styles2.css';
-One common @rule that you are likely to encounter is @media, which is used to create media queries.
Media queries use conditional logic for applying CSS styling.

-In the example below, the stylesheet defines a default pink background for the <body> element. However, a media query
follows that defines a blue background if the browser viewport is wider than 30em.
--    body {
        background-color: pink;
      }

      @media (min-width: 30em) {
        body {
          background-color: blue;
        }
      }


*Shorthands
-Some properties like font, background, padding, border, and margin are called shorthand properties. This is because
shorthand properties set several values in a single line.
-/* In 4-value shorthands like padding and margin, the values are applied
   in the order top, right, bottom, left (clockwise from the top). There are also other
   shorthand types, for example 2-value shorthands, which set padding/margin
   for top/bottom, then left/right */


*Comments
-As with any coding work, it is best practice to write comments along with CSS. This helps you to remember how the
code works as you come back later for fixes or enhancement. It also helps others understand the code.

-CSS Comments begin with /* and end with */. In the example below, comments mark the start of distinct sections of code.
This helps to navigate the codebase as it gets larger. With this kind of commenting in place, searching for comments
in your code editor becomes a way to efficiently find a section of code.


*White space
-White space means actual spaces, tabs and new lines. Just as browsers ignore white space in HTML, browsers ignore
white space inside CSS. The value of white space is how it can improve readability.
-You should always make sure to separate distinct values from one another by at least one space. Keep property names and property values together as single unbroken strings.
