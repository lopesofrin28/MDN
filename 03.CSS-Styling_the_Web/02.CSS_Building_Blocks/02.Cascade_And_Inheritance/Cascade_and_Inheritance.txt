The aim of this lesson is to develop your understanding of some of the most fundamental concepts of CSS — the cascade, specificity,
and inheritance — which control how CSS is applied to HTML and how conflicts are resolved.

*Conflicting rules
-CSS stands for Cascading Style Sheets, and that first word cascading is incredibly important to understand — the way that the
 cascade behaves is key to understanding CSS.

[1] The cascade
-Stylesheets cascade — at a very simple level this means that the order of CSS rules matter; when two rules apply that have equal
 specificity the one that comes last in the CSS is the one that will be used.

[2]Specificity
-Specificity is how the browser decides which rule applies if multiple rules have different selectors, but could still apply to the
same element. It is basically a measure of how specific a selector's selection will be:

->An element selector is less specific — it will select all elements of that type that appear on a page — so will get a lower score.
->A class selector is more specific — it will select only the elements on a page that have a specific class attribute value —
so will get a higher score.

[3]Inheritance
-Inheritance also needs to be understood in this context — some CSS property values set on parent elements are inherited by
their child elements, and some aren't.



*Controlling inheritance
-CSS provides four special universal property values for controlling inheritance. Every CSS property accepts these values.

1]inherit
Sets the property value applied to a selected element to be the same as that of its parent element. Effectively, this
"turns on inheritance".
2]initial
Sets the property value applied to a selected element to the initial value of that property.
3]unset
Resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise
it acts like initial.


*Understanding the cascade
-We will now take a proper look at how the cascade defines which CSS rules apply when more than one thing could style an element.

There are three factors to consider, listed here in decreasing order of importance. Earlier ones overrule later ones:

1]Importance
2]Specificity
3]Source order
We will look at these from the bottom up, to see how browsers figure out exactly what CSS should be applied.

[1]Source order
- If you have more than one rule, which has exactly the same weight, then the one that comes last in the CSS will win. You can
think of this as rules which are nearer the element itself overwriting early ones until the last one wins and gets to style
the element.

[2]Specificity
-Once you understand the fact that source order matters, at some point you will run into a situation where you know that a rule
 comes later in the stylesheet, but an earlier, conflicting, rule is applied. This is because that earlier rule has a higher
 specificity — it is more specific, and therefore is being chosen by the browser as the one that should style the element.

 [3]!important
- There is a special piece of CSS that you can use to overrule all of the above calculations, however you should be very careful
with using it — !important. This is used to make a particular property and value the most specific thing, thus overriding the
normal rules of the cascade.
