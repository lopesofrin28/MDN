What are writing modes?
A writing mode in CSS refers to whether the text is running horizontally or vertically. The writing-mode property lets us switch from
one writing mode to another. You don't need to be working in a language which uses a vertical writing mode to want to do this — you
could also change the writing mode of parts of your layout for creative purposes.

In the example below we have a heading displayed using writing-mode: vertical-rl. The text now runs vertically. Vertical text is common
in graphic design, and can be a way to add a more interesting look and feel to your web design.

The three possible values for the writing-mode property are:

horizontal-tb: Top-to-bottom block flow direction. Sentences run horizontally.
vertical-rl: Right-to-left block flow direction. Sentences run vertically.
vertical-lr: Left-to-right block flow direction. Sentences run vertically.

So the writing-mode property is in reality setting the direction in which block-level elements are displayed on the page — either from
top-to-bottom, right-to-left, or left-to-right. This then dictates the direction text flows in sentences.


*Writing modes and block and inline layout
We have already discussed block and inline layout, and the fact that some things display as block elements and others as inline elements.
As we have seen described above, block and inline is tied to the writing mode of the document, and not the physical screen. Blocks are
only displayed from the top to the bottom of the page if you are using a writing mode that displays text horizontally, such as English.

If we look at an example this will become clearer. In this next example I have two boxes that contain a heading and a paragraph. The
first uses writing-mode: horizontal-tb, a writing mode that is written horizontally and from the top of the page to the bottom. The
second uses writing-mode: vertical-rl; this is a writing mode that is written vertically and from right to left.


*Logical properties and values
The reason to talk about writing modes and direction at this point in your learning however, is because of the fact we have already
looked at a lot of properties which are tied to the physical dimensions of the screen, and make most sense when in a horizontal
writing mode.

Let's take a look at our two boxes again — one with a horizontal-tb writing mode and one with vertical-rl. I have given both of these
boxes a width. You can see that when the box is in the vertical writing mode, it still has a width, and this is causing the text to
overflow.

What we really want in this scenario, is to essentially swap height and width along with the writing mode. When we're in a vertical
writing mode we want the box to expand in the block dimension just like it does in the horizontal mode.

To make this easier, CSS has recently developed a set of mapped properties. These essentially replace physical properties — things like
width and height — with logical, or flow relative versions.

The property mapped to width when in a horizontal writing mode is called inline-size — it refers to the size in the inline dimension.
The property for height is named block-size and is the size in the block dimension. You can see how this works in the example below
where we have replaced width with inline-size.



*Logical margin, border, and padding properties
In the last two lessons we have learned about the CSS box model, and CSS borders. In the margin, border, and padding properties you
will find many instances of physical properties, for example margin-top, padding-left, and border-bottom. In the same way that we have
mappings for width and height there are mappings for these properties.

The margin-top property is mapped to margin-block-start — this will always refer to the margin at the start of the block dimension.

The padding-left property maps to padding-inline-start, the padding that is applied to the start of the inline direction. This will be
where sentences start in that writing mode. The border-bottom property maps to border-block-end, which is the border at the end of the
block dimension.


*Logical values
We have so far looked at logical property names. There are also some properties that take physical values of top, right, bottom, and
left. These values also have mappings, to logical values — block-start, inline-end, block-end, and inline-start.

For example, you can float an image left to cause text to wrap round the image. You could replace left with inline-start as shown in
the example below
